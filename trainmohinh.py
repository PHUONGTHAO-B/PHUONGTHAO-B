# ================================================================
# üéØ D·ª∞ ƒêO√ÅN C√ÇY TR·ªíNG PH√ô H·ª¢P D·ª∞A TR√äN TH√îNG S·ªê ƒê·∫§T & M√îI TR∆Ø·ªúNG
# S·ª≠ d·ª•ng m√¥ h√¨nh Support Vector Machine (SVM)
# ================================================================

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
import joblib

# ------------------------------------------------
# 1Ô∏è‚É£ ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
# ------------------------------------------------
data = pd.read_csv("Crop_recommendation.csv")

# Hi·ªÉn th·ªã v√†i d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra
print("üìÇ D·ªØ li·ªáu m·∫´u:")
print(data.head())

# ------------------------------------------------
# 2Ô∏è‚É£ T√°ch ƒë·∫∑c tr∆∞ng (features) v√† nh√£n (label)
# ------------------------------------------------
# 'label' l√† t√™n c√¢y tr·ªìng c·∫ßn d·ª± ƒëo√°n
X = data.drop("label", axis=1)   # ƒê·∫∑c tr∆∞ng: N, P, K, temperature, humidity, ph, rainfall
y = data["label"]                # Nh√£n: lo·∫°i c√¢y tr·ªìng

# ------------------------------------------------
# 3Ô∏è‚É£ M√£ h√≥a nh√£n c√¢y tr·ªìng th√†nh s·ªë (Label Encoding)
# ------------------------------------------------
# V√≠ d·ª•: rice -> 0, maize -> 1, chickpea -> 2, ...
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# ------------------------------------------------
# 4Ô∏è‚É£ Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
# ------------------------------------------------
# 80% d√πng ƒë·ªÉ hu·∫•n luy·ªán, 20% ƒë·ªÉ ƒë√°nh gi√° m√¥ h√¨nh
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42
)

# ------------------------------------------------
# 5Ô∏è‚É£ T·∫°o pipeline g·ªìm 2 b∆∞·ªõc:
#     - Chu·∫©n h√≥a d·ªØ li·ªáu b·∫±ng StandardScaler
#     - Hu·∫•n luy·ªán m√¥ h√¨nh SVM (kernel RBF)
# ------------------------------------------------
pipeline = Pipeline([
    ("scaler", StandardScaler()),               # B∆∞·ªõc 1: chu·∫©n h√≥a d·ªØ li·ªáu
    ("svm", SVC(kernel='rbf', C=10, gamma='scale', probability=True))  # B∆∞·ªõc 2: m√¥ h√¨nh SVM
])

# ------------------------------------------------
# 6Ô∏è‚É£ Hu·∫•n luy·ªán m√¥ h√¨nh
# ------------------------------------------------
print("\nüöÄ ƒêang hu·∫•n luy·ªán m√¥ h√¨nh SVM...")
pipeline.fit(X_train, y_train)
print("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")

# ------------------------------------------------
# 7Ô∏è‚É£ ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c m√¥ h√¨nh
# ------------------------------------------------
accuracy = pipeline.score(X_test, y_test)
print(f"üéØ ƒê·ªô ch√≠nh x√°c m√¥ h√¨nh tr√™n t·∫≠p ki·ªÉm tra: {accuracy * 100:.2f}%")

# ------------------------------------------------
# 8Ô∏è‚É£ L∆∞u m√¥ h√¨nh v√† b·ªô m√£ h√≥a v√†o m·ªôt file duy nh·∫•t
# ------------------------------------------------
# G·ªôp c·∫£ pipeline (chu·∫©n h√≥a + SVM) v√† label_encoder (gi·∫£i m√£ t√™n c√¢y)
model_package = {
    "pipeline": pipeline,
    "label_encoder": label_encoder
}

joblib.dump(model_package, "SVM_model.pkl")

print("\nüíæ ƒê√£ l∆∞u m√¥ h√¨nh v√†o file: SVM_model.pkl")
print("B·∫°n c√≥ th·ªÉ n·∫°p l·∫°i file n√†y ƒë·ªÉ d·ª± ƒëo√°n trong Flask ho·∫∑c Streamlit.")
